{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","startSearch","event","$","empty","preventDefault","search","val","order","max","count","videoSearch","API_KEY","key","orderBy","get","data","console","log","videos","items","n","length","i","item","video","id","videoId","append","handleOnScroll","scrollTop","document","documentElement","body","scrollHeight","clientHeight","window","innerHeight","Math","ceil","addEventListener","this","removeEventListener","className","src","width","alt","style","display","margin","type","value","onClick","placeholder","min","defaultValue","label","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3db7849d.chunk.js","sourcesContent":["import React from 'react';\nimport $ from 'jquery';\n\nclass  App extends React.Component {\n  constructor(props){\n    super(props);\n    this.API_KEY=\"AIzaSyDiTJ-eKfGFJZUmKvyjkg1JfKuh_wCbJGo\";\n    this.search='Tech Trends';\n    this.max=15;\n    this.order=\"relevance\";\n    this.count=15;\n  }\n\n  startSearch = (event)=>{\n    $(\"#videos\").empty();    \n    event.preventDefault();    \n    this.search=$(\"#search\").val();\n    this.order=$(\"select\").val() || \"Relevance\";    \n    this.max=$(\"#maxresult-input\").val()||15;    \n    this.count=this.max;\n    this.videoSearch(this.API_KEY,this.search,this.max,this.order,this.count);\n  }\n\n  videoSearch=(key,search,max,orderBy,count)=>{\n    \n      $.get(\"https://www.googleapis.com/youtube/v3/search?key=\"+key+\"&type=video&part=snippet&maxResults=\"+max+\"&q=\"+search+\"&order=\"+orderBy,function(data){\n        console.log(data);\n        let videos=data.items;\n        let n=videos.length;\n        for(var i=max-count;i<max;i++){\n          let item=videos[i%n];\n          let video = ` \n          <iframe src=\"https://www.youtube.com/embed/${item.id.videoId}\" frameborder=\"0\" allowfullscreen></iframe>\n          `\n\n          $(\"#videos\").append(video)\n        }\n      });\n  }\n  componentDidMount(){\n\n      window.addEventListener('scroll', this.handleOnScroll);\n      this.videoSearch(this.API_KEY,this.search,this.max,this.order,this.count);\n  \n  }\n\n  componentWillUnmount(){\n    window.removeEventListener('scroll', this.handleOnScroll);\n  }\n  handleOnScroll =  () => {\n    var scrollTop = (document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop;\n    var scrollHeight = (document.documentElement && document.documentElement.scrollHeight) || document.body.scrollHeight;\n    var clientHeight = document.documentElement.clientHeight || window.innerHeight;\n    var scrolledToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight;\n\n    if (scrolledToBottom) {      \n      this.max=this.max+this.count;\n      this.videoSearch(this.API_KEY,this.search,this.max,this.order,this.count);\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"container\">\n      <img src=\"https://pngimg.com/uploads/youtube/youtube_PNG21.png\" width={\"15%\"} alt=\"Loading\"/>\n      <form id=\"form\">\n        <div style={{display:\"flex\"}}>\n          <div className=\"form-group\" style={{margin: \"10px\",width: \"70%\"}}>\n            <input className=\"form-control\" type=\"text\" id=\"search\"></input>\n          </div>\n          <div className=\"form-group\" style={{margin: \"10px\"}}>\n            <input type=\"submit\" id=\"form-submit\" className=\"btn btn-danger\" value=\"search\" onClick={this.startSearch}/>\n          </div>\n          <div className=\"form-group\" style={{margin: \"10px\"}} >\n            <input type=\"number\" id=\"maxresult-input\" placeholder=\"Max Results\" min=\"10\" max=\"50\"/>\n          </div>\n          <div style={{margin: \"10px\"}} className=\"form-group\">\n            <select id=\"order-input\" defaultValue={{ label: \"Relevance\", value: \"Relevance\" }} >\n                      <option value=\"\">--SELECT ORDER--</option>\n                      <option value=\"date\">Date</option>\n                      <option value=\"rating\">Rating</option>\n                      <option value=\"relevance\">Relevance</option>\n                      <option value=\"title\">Title</option>\n                      <option value=\"viewCount\">View Count</option>\n                  </select>\n          </div>\n        </div>\n      </form>\n      <br/>\n      <div className=\"row\">\n        <div className=\"col-md-12 col-lg-12\">\n          <div id=\"videos\"></div>\n        </div>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n/*\n  window.addEventListener('scroll', this.handleOnScroll);\n\n  componentWillUnmount(){\n    window.removeEventListener('scroll', this.handleOnScroll);\n  }\n  handleOnScroll =  () => {\n    var scrollTop = (document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop;\n    var scrollHeight = (document.documentElement && document.documentElement.scrollHeight) || document.body.scrollHeight;\n    var clientHeight = document.documentElement.clientHeight || window.innerHeight;\n    var scrolledToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight;\n\n    if (scrolledToBottom) {\n      let max1=this.state.max+this.state.videosCount;\n      this.setState({max:max1});\n      console.log(\"Loaded\");\n      this.state.fun(this.state.key,this.state.search,this.state.max,this.state.order,this.state.videosCount);\n    }\n  }\n\n*/ \nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}